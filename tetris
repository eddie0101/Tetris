#include <iostream>
#include <cstdlib>
#include <windows.h>
#include <conio.h>
#include <time.h>

using namespace std;

// Dimensiuni careu
#define HEIGHT 23
#define WIDTH 23

// Caracterele jocului
#define SQUARE_CHARACTER_1 (char)223    // ▀
#define SQUARE_CHARACTER_2 (char)219    // █
#define SQUARE_CHARACTER_3 (char)220    // ▄
#define PIECE_CHARACTER 'O'
#define MENU_SELECT_CHARACTER (char)16  // DLE

// Viteze
#define SPEED_DOWN 25
#define SPEED_LEFT_RIGHT 50
#define GAME_OVER_SPEED 10

// Culori
#define CURRENT_PIECE_COLOR 12
#define PIECE_COLOR 8
#define SQUARE_COLOR 3
#define GAME_OVER_COLOR 12
#define PAUSE_COLOR 12
#define SCORE_AND_LETTER_COLOR 6
#define RIGHT_SIDE_FONT_COLOR 8
#define START_MENU_FONT_COLOR 8
#define ABOUT_FONT_COLOR_1 5
#define ABOUT_FONT_COLOR_2 6
#define HELP_FONT_COLOR_1 5
#define HELP_FONT_COLOR_2 6
#define GAME_OVER_CHOICES_COLOR_1 8
#define GAME_OVER_CHOICES_COLOR_2 6

// Coordonate Game Over si Pauza
#define GAME_OVER_HEIGHT_POSITION HEIGHT / 2 + 3
#define GAME_OVER_WIDTH_POSITION 7
#define PAUSE_WIDTH_POSITION 9

char square[HEIGHT + 4][WIDTH]; // matricea principala (careul in care sunt piesele si meniul jocului)
char square_right[HEIGHT][10]; // matricea secundara (matricea care contine scorul si piesa urmatoare)

// Pieces
char piece_T[4][4];  // T
char piece_L[4][4];  // L
char piece_Lr[4][4]; // L (oglindit)
char piece_Z[4][4];  // Z
char piece_Zr[4][4]; // Z (oglindit)
char piece_O[4][4];  // O
char piece_I[4][4];  // I

// Alte variabile
int column = WIDTH / 2 - 1; // variabila care stabileste valoarea coloanei
							//	pentru locul in care va fi copiata piesa in matricea mare
int speed = 500;
int score_2; // cand score >= score_2 se mareste viteza si score_2
int score = 0; // memoreaza scorul
int sleep_value;
int before_piece_down;
int last_piece_loop;
int random_piece_value; // memoreaza piesa curenta
int next_random_piece_value; // memoreaza piesa urmatoare
int coord_value;
int x = 1; // se adauga la score
int x_2 = 10; // se adauga la score_2
int current_choice;

bool play_again;
bool game_over_condition;
bool exit_game;

bool check_line();

void display_next_piece();

void start_menu();

void gotoxy(int column, int line) {
	COORD coord;
	coord.X = column;
	coord.Y = line;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void setColor(short int color = 7) {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole, color);
}

struct coordonates {
	int x, y, z;
} a, b, c, d, var;

void display_up() {       // afiseaza partea de sus a matricii square
	for (int i = 0; i <= 3; i++) {
		for (int j = 0; j <= WIDTH - 1; j++)
			cout << square[i][j];
		cout << endl;
	}
}

void display_square_up() { // afisarea caracterelor careului de sus
	setColor(SQUARE_COLOR);
	for (int i = 0; i <= WIDTH - 1; i++)
		cout << SQUARE_CHARACTER_3;
	cout << endl;
}

void display_square() {
	for (int i = 4; i <= HEIGHT - 1 + 3; i++) {
		for (int j = 0; j <= WIDTH - 1; j++) {
			if (square[i][j] == SQUARE_CHARACTER_1 || square[i][j] == SQUARE_CHARACTER_2 || square[i][j] == SQUARE_CHARACTER_3)
				setColor(SQUARE_COLOR);
			if (square[i][j] == PIECE_CHARACTER)
				if (i == a.x && j == a.y || i == b.x && j == b.y || i == c.x && j == c.y || i == d.x && j == d.y)
					setColor(CURRENT_PIECE_COLOR);
				else
					setColor(PIECE_COLOR);
			if (square[i][j] == 'G') {
				setColor(GAME_OVER_COLOR);
				int f = j;
				for (j; j <= f + 8; j++)
					cout << square[i][j];
				j--;
			}
			else
				cout << square[i][j];
		}
		cout << endl;
	}
}

void display_right_side() {
	for (int i = 0; i <= HEIGHT - 1; i++) {
		gotoxy(23, i);
		for (int j = 0; j <= 9; j++) {
			if (square_right[i][j] != SQUARE_CHARACTER_1 && square_right[i][j] != SQUARE_CHARACTER_2 && square_right[i][j] != SQUARE_CHARACTER_3)
				setColor(RIGHT_SIDE_FONT_COLOR);
			else
				setColor(SQUARE_COLOR);
			cout << square_right[i][j];
		}
	}
}

void display_score() {
	if (score <= 99) {
		gotoxy(27, 3);
		cout << score;
	}
	else {
		gotoxy(26, 3);
		cout << score;
	}
}

void display_piece(char x[4][4]) {
	setColor(SCORE_AND_LETTER_COLOR);
	int k = 9;
	gotoxy(26, k);
	for (int i = 0; i <= 3; i++) {
		if (next_random_piece_value == 5)
			cout << ' ';
		for (int j = 0; j <= 3; j++)
			cout << x[i][j];
		gotoxy(26, ++k);
	}
}

void display_next_piece() {
	switch (next_random_piece_value) {
	case 0: display_piece(piece_T); break;
	case 1: display_piece(piece_L); break;
	case 2: display_piece(piece_Lr); break;
	case 3: display_piece(piece_Z); break;
	case 4: display_piece(piece_Zr); break;
	case 5: display_piece(piece_O); break;
	case 6: display_piece(piece_I); break;
	}
}

void display() {
	display_square_up();
	display_square();
}

void display_pause() {
	display_square_up();
	for (int i = 4; i <= HEIGHT - 1 + 3; i++) {
		for (int j = 0; j <= WIDTH - 1; j++)
			if (i == HEIGHT / 2 + 3 && j == PAUSE_WIDTH_POSITION) {
				setColor(PAUSE_COLOR);
				cout << "PAUSE";
				setColor(SQUARE_COLOR);
				j += 4;
			}
			else
				if (square[i][j] == PIECE_CHARACTER)
					cout << ' ';
				else
					cout << square[i][j];
		cout << endl;
	}
}

void display_start_menu() {
	setColor(START_MENU_FONT_COLOR);
	gotoxy(9, 8);  cout << "Play";
	gotoxy(9, 10); cout << "Help";
	gotoxy(9, 12); cout << "About";
	gotoxy(9, 14); cout << "Exit";
}

void display_menu_select_character(int y) {
	int z = 7 + 2 * y - 1;
	gotoxy(7, z); cout << MENU_SELECT_CHARACTER;
}

void display_about() {
	gotoxy(0, 0);
	display();
	setColor(ABOUT_FONT_COLOR_1);
	gotoxy(2, 2); cout << "Made by:";
	setColor(ABOUT_FONT_COLOR_2);
	gotoxy(2, 3); cout << "Ghiuzan Eduard";
	setColor(ABOUT_FONT_COLOR_1);
	gotoxy(2, 5); cout << "Developed in:";
	setColor(ABOUT_FONT_COLOR_2);
	gotoxy(2, 6); cout << "C++ language";
	setColor(ABOUT_FONT_COLOR_1);
	gotoxy(2, 8); cout << "IDE used:";
	setColor(ABOUT_FONT_COLOR_2);
	gotoxy(2, 9); cout << "Visual Studio 2017";
	gotoxy(2, 10); cout << "Professional";
	setColor(ABOUT_FONT_COLOR_1);
	gotoxy(2, 12); cout << "Compatibility:";
	setColor(ABOUT_FONT_COLOR_2);
	gotoxy(2, 13); cout << "Windows Vista/7/8/10";
	setColor(2);
	gotoxy(2, 18); cout << "Press BACKSPACE to";
	gotoxy(2, 19); cout << "get back";
	while (true)
		if (GetKeyState(VK_BACK) < 0)
			break;
}

void display_help() {
	gotoxy(0, 0);
	display();
	setColor(ABOUT_FONT_COLOR_1);
	gotoxy(2, 2); cout << "Press "; setColor(HELP_FONT_COLOR_2); cout << "UP"; setColor(HELP_FONT_COLOR_1); cout << " key to";
	gotoxy(2, 3); cout << "spin the letter";
	gotoxy(2, 5); cout << "Press "; setColor(HELP_FONT_COLOR_2); cout << "LEFT"; setColor(HELP_FONT_COLOR_1); cout << " key to";
	gotoxy(2, 6); cout << "move the letter";
	gotoxy(2, 7); cout << "to the left";
	gotoxy(2, 9); cout << "Press "; setColor(HELP_FONT_COLOR_2); cout << "RIGHT"; setColor(HELP_FONT_COLOR_1); cout << " key to";
	gotoxy(2, 10); cout << "move the letter";
	gotoxy(2, 11); cout << "to the right";
	gotoxy(2, 13); cout << "Press "; setColor(HELP_FONT_COLOR_2); cout << "DOWN"; setColor(HELP_FONT_COLOR_1); cout << " key to";
	gotoxy(2, 14); cout << "move the letter";
	gotoxy(2, 15); cout << "dows faster";
	setColor(2);
	gotoxy(2, 18); cout << "Press BACKSPACE to";
	gotoxy(2, 19); cout << "get back";
	while (true)
		if (GetKeyState(VK_BACK) < 0)
			break;
}

void display_game_over_choices() {
	setColor(GAME_OVER_CHOICES_COLOR_1);
	gotoxy(2, 15); cout << "Press "; setColor(GAME_OVER_CHOICES_COLOR_2); cout << "ENTER"; setColor(GAME_OVER_CHOICES_COLOR_1); cout << " key to";
	gotoxy(6, 16); cout << "play again";
	gotoxy(2, 18); cout << "Press "; setColor(GAME_OVER_CHOICES_COLOR_2); cout << "BACKSPACE"; setColor(GAME_OVER_CHOICES_COLOR_1); cout << " key";
	gotoxy(5, 19); cout << "to return to";
	gotoxy(7, 20); cout << "the menu";
}

void erase_menu_select_character(int y) {
	int z = 7 + 2 * y - 1;
	gotoxy(7, z); cout << '\0';
}

void make_square() {
	for (int i = 4; i <= HEIGHT - 2 + 3; i++)
		square[i][0] = SQUARE_CHARACTER_2;
	for (int i = 0; i <= WIDTH - 1; i++)
		square[HEIGHT - 1 + 3][i] = SQUARE_CHARACTER_1;
	for (int i = 4; i <= HEIGHT - 2 + 3; i++)
		square[i][WIDTH - 1] = SQUARE_CHARACTER_2;
}

void make_right_side() {
	for (int i = 0; i <= 9; i++) {
		square_right[0][i] = SQUARE_CHARACTER_3;
		square_right[5][i] = SQUARE_CHARACTER_1;
		square_right[13][i] = SQUARE_CHARACTER_1;
		square_right[HEIGHT - 1][i] = SQUARE_CHARACTER_1;
	}
	for (int i = 1; i <= HEIGHT - 2; i++)
		square_right[i][9] = SQUARE_CHARACTER_2;

	//score
	square_right[1][2] = 's';
	square_right[1][3] = 'c';
	square_right[1][4] = 'o';
	square_right[1][5] = 'r';
	square_right[1][6] = 'e';

	//next piece
	square_right[6][2] = 'n';
	square_right[6][3] = 'e';
	square_right[6][4] = 'x';
	square_right[6][5] = 't';

	square_right[7][3] = 'p';
	square_right[7][4] = 'i';
	square_right[7][5] = 'e';
	square_right[7][6] = 'c';
	square_right[7][7] = 'e';

	//press SPACE to pause
	square_right[14][2] = 'p';
	square_right[14][3] = 'r';
	square_right[14][4] = 'e';
	square_right[14][5] = 's';
	square_right[14][6] = 's';

	square_right[16][2] = 'S';
	square_right[16][3] = 'P';
	square_right[16][4] = 'A';
	square_right[16][5] = 'C';
	square_right[16][6] = 'E';

	square_right[18][3] = 't';
	square_right[18][4] = 'o';

	square_right[20][2] = 'p';
	square_right[20][3] = 'a';
	square_right[20][4] = 'u';
	square_right[20][5] = 's';
	square_right[20][6] = 'e';

}

void make_piece_T() {
	piece_T[0][1] = PIECE_CHARACTER;
	piece_T[1][0] = PIECE_CHARACTER;
	piece_T[1][1] = PIECE_CHARACTER;
	piece_T[1][2] = PIECE_CHARACTER;
}

void make_piece_L() {
	piece_L[0][0] = PIECE_CHARACTER;
	piece_L[1][0] = PIECE_CHARACTER;
	piece_L[1][1] = PIECE_CHARACTER;
	piece_L[1][2] = PIECE_CHARACTER;
}

void make_piece_Lr() {
	piece_Lr[0][2] = PIECE_CHARACTER;
	piece_Lr[1][0] = PIECE_CHARACTER;
	piece_Lr[1][1] = PIECE_CHARACTER;
	piece_Lr[1][2] = PIECE_CHARACTER;
}

void make_piece_Z() {
	piece_Z[0][0] = PIECE_CHARACTER;
	piece_Z[0][1] = PIECE_CHARACTER;
	piece_Z[1][1] = PIECE_CHARACTER;
	piece_Z[1][2] = PIECE_CHARACTER;
}

void make_piece_Zr() {
	piece_Zr[0][1] = PIECE_CHARACTER;
	piece_Zr[0][2] = PIECE_CHARACTER;
	piece_Zr[1][0] = PIECE_CHARACTER;
	piece_Zr[1][1] = PIECE_CHARACTER;
}

void make_piece_O() {
	piece_O[0][0] = PIECE_CHARACTER;
	piece_O[0][1] = PIECE_CHARACTER;
	piece_O[1][0] = PIECE_CHARACTER;
	piece_O[1][1] = PIECE_CHARACTER;
}

void make_piece_I() {
	piece_I[1][0] = PIECE_CHARACTER;
	piece_I[1][1] = PIECE_CHARACTER;
	piece_I[1][2] = PIECE_CHARACTER;
	piece_I[1][3] = PIECE_CHARACTER;
}

void copy_piece_to_square(char x[4][4]) {
	int meter = 1;
	for (int i = 0; i <= 3; i++)
		for (int j = 0; j <= 3; j++) {
			square[i][column + j] = x[i][j];
			if (x[i][j] == PIECE_CHARACTER) {
				switch (meter) {
				case 1:
					a.x = i;
					a.y = j + column;
					meter++;
					break;
				case 2:
					b.x = i;
					b.y = j + column;
					meter++;
					break;
				case 3:
					c.x = i;
					c.y = j + column;
					meter++;
					break;
				case 4:
					d.x = i;
					d.y = j + column;
					meter++;
					break;
				}
			}
		}
}

void rotate_piece_T() {
	char aux;
	if (b.x == c.x && c.x == d.x) {
		if (square[b.x + 1][b.y + 1] != PIECE_CHARACTER && square[b.x + 1][b.y + 1] != SQUARE_CHARACTER_2 && square[b.x + 1][b.y + 1] != SQUARE_CHARACTER_1) {

			aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x + 1][b.y + 1]; square[b.x + 1][b.y + 1] = aux; b.x = b.x + 1; b.y = b.y + 1;

			var.x = b.x; var.y = b.y; b.x = c.x; b.y = c.y; c.x = var.x; c.y = var.y;
			var.x = c.x; var.y = c.y; c.x = d.x; c.y = d.y; d.x = var.x; d.y = var.y;
		}
	}
	else
		if (a.y == b.y && b.y == d.y) {
			if (square[a.x + 1][a.y - 1] != PIECE_CHARACTER && square[a.x + 1][a.y - 1] != SQUARE_CHARACTER_2 && square[a.x + 1][a.y - 1] != SQUARE_CHARACTER_1) {

				aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 1][a.y - 1]; square[a.x + 1][a.y - 1] = aux; a.x = a.x + 1; a.y = a.y - 1;
			}
		}
		else
			if (a.x == b.x && b.x == c.x) {
				if (square[c.x - 1][c.y - 1] != PIECE_CHARACTER && square[c.x - 1][c.y - 1] != SQUARE_CHARACTER_2 && square[c.x - 1][c.y - 1] != SQUARE_CHARACTER_1) {

					aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x - 1][c.y - 1]; square[c.x - 1][c.y - 1] = aux; c.x = c.x - 1; c.y = c.y - 1;

					var.x = a.x; var.y = a.y; a.x = c.x; a.y = c.y; c.x = var.x; c.y = var.y;
					var.x = b.x; var.y = b.y; b.x = c.x; b.y = c.y; c.x = var.x; c.y = var.y;
				}
			}
			else
				if (a.y == c.y && c.y == d.y)
					if (square[d.x - 1][d.y + 1] != PIECE_CHARACTER && square[d.x - 1][d.y + 1] != SQUARE_CHARACTER_2 && square[d.x - 1][d.y + 1] != SQUARE_CHARACTER_1) {

						aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 1][d.y + 1]; square[d.x - 1][d.y + 1] = aux; d.x = d.x - 1; d.y = d.y + 1;
					}
}

void rotate_piece_L() {
	char aux;
	if (b.x == c.x) {
		if (a.x < b.x) {
			if (square[a.x][a.y + 2] != PIECE_CHARACTER && square[a.x][a.y + 2] != SQUARE_CHARACTER_2 && square[a.x][a.y + 2] != SQUARE_CHARACTER_1 &&
				square[b.x - 1][b.y + 1] != PIECE_CHARACTER && square[b.x - 1][b.y + 1] != SQUARE_CHARACTER_2 && square[b.x - 1][b.y + 1] != SQUARE_CHARACTER_1 &&
				square[d.x + 1][d.y - 1] != PIECE_CHARACTER && square[d.x + 1][d.y - 1] != SQUARE_CHARACTER_2 && square[d.x + 1][d.y - 1] != SQUARE_CHARACTER_1) {

				aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x][a.y + 2]; square[a.x][a.y + 2] = aux; a.y = a.y + 2;
				aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x - 1][b.y + 1]; square[b.x - 1][b.y + 1] = aux; b.x = b.x - 1; b.y = b.y + 1;
				aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x + 1][d.y - 1]; square[d.x + 1][d.y - 1] = aux; d.x = d.x + 1; d.y = d.y - 1;

				var.x = a.x; var.y = a.y; a.x = b.x; a.y = b.y; b.x = var.x; b.y = var.y;
			}
		}
		else
			if (square[a.x - 1][a.y + 1] != PIECE_CHARACTER && square[a.x - 1][a.y + 1] != SQUARE_CHARACTER_2 && square[a.x - 1][a.y + 1] != SQUARE_CHARACTER_1 &&
				square[c.x + 1][c.y - 1] != PIECE_CHARACTER && square[c.x + 1][c.y - 1] != SQUARE_CHARACTER_2 && square[c.x + 1][c.y - 1] != SQUARE_CHARACTER_1 &&
				square[d.x][d.y - 2] != PIECE_CHARACTER && square[d.x][d.y - 2] != SQUARE_CHARACTER_2 && square[d.x][d.y - 2] != SQUARE_CHARACTER_1) {

				aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x - 1][a.y + 1]; square[a.x - 1][a.y + 1] = aux; a.x = a.x - 1; a.y = a.y + 1;
				aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x + 1][c.y - 1]; square[c.x + 1][c.y - 1] = aux; c.x = c.x + 1; c.y = c.y - 1;
				aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x][d.y - 2]; square[d.x][d.y - 2] = aux; d.y = d.y - 2;

				var.x = c.x; var.y = c.y; c.x = d.x; c.y = d.y; d.x = var.x; d.y = var.y;
			}

	}
	else
		if (a.y == d.y)
			if (b.y > a.y) {
				if (square[a.x + 1][a.y + 1] != PIECE_CHARACTER && square[a.x + 1][a.y + 1] != SQUARE_CHARACTER_2 && square[a.x + 1][a.y + 1] != SQUARE_CHARACTER_1 &&
					square[b.x + 2][b.y] != PIECE_CHARACTER && square[b.x + 2][b.y] != SQUARE_CHARACTER_2 && square[b.x + 2][b.y] != SQUARE_CHARACTER_1 &&
					square[d.x - 1][d.y - 1] != PIECE_CHARACTER && square[d.x - 1][d.y - 1] != SQUARE_CHARACTER_2 && square[d.x - 1][d.y - 1] != SQUARE_CHARACTER_1) {

					aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 1][a.y + 1]; square[a.x + 1][a.y + 1] = aux; a.x = a.x + 1; a.y = a.y + 1;
					aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x + 2][b.y]; square[b.x + 2][b.y] = aux; b.x = b.x + 2;
					aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 1][d.y - 1]; square[d.x - 1][d.y - 1] = aux; d.x = d.x - 1; d.y = d.y - 1;

					var.x = d.x; var.y = d.y; d.x = b.x; d.y = b.y; b.x = var.x; b.y = var.y;
					var.x = a.x; var.y = a.y; a.x = c.x; a.y = c.y; c.x = var.x; c.y = var.y;
					var.x = a.x; var.y = a.y; a.x = b.x; a.y = b.y; b.x = var.x; b.y = var.y;
				}
			}
			else {
				if (c.y < a.y) {
					if (square[a.x + 1][a.y + 1] != PIECE_CHARACTER && square[a.x + 1][a.y + 1] != SQUARE_CHARACTER_2 && square[a.x + 1][a.y + 1] != SQUARE_CHARACTER_1 &&
						square[c.x - 2][c.y] != PIECE_CHARACTER && square[c.x - 2][c.y] != SQUARE_CHARACTER_2 && square[c.x - 2][c.y] != SQUARE_CHARACTER_1 &&
						square[d.x - 1][d.y - 1] != PIECE_CHARACTER && square[d.x - 1][d.y - 1] != SQUARE_CHARACTER_2 && square[d.x - 1][d.y - 1] != SQUARE_CHARACTER_1) {

						aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 1][a.y + 1]; square[a.x + 1][a.y + 1] = aux; a.x = a.x + 1; a.y = a.y + 1;
						aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x - 2][c.y]; square[c.x - 2][c.y] = aux; c.x = c.x - 2;
						aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 1][d.y - 1]; square[d.x - 1][d.y - 1] = aux; d.x = d.x - 1; d.y = d.y - 1;

						var.x = a.x; var.y = a.y; a.x = c.x; a.y = c.y; c.x = var.x; c.y = var.y;
						var.x = d.x; var.y = d.y; d.x = b.x; d.y = b.y; b.x = var.x; b.y = var.y;
						var.x = d.x; var.y = d.y; d.x = c.x; d.y = c.y; c.x = var.x; c.y = var.y;
					}
				}
			}
}

void rotate_piece_Lr() {
	char aux;
	if (b.x == c.x) {
		if (a.x < d.x && c.x == d.x) {
			if (square[a.x + 2][a.y] != PIECE_CHARACTER && square[a.x + 2][a.y] != SQUARE_CHARACTER_2 && square[a.x + 2][a.y] != SQUARE_CHARACTER_1 &&
				square[b.x - 1][b.y + 1] != PIECE_CHARACTER && square[b.x - 1][b.y + 1] != SQUARE_CHARACTER_2 && square[b.x - 1][b.y + 1] != SQUARE_CHARACTER_1 &&
				square[d.x + 1][d.y - 1] != PIECE_CHARACTER && square[d.x + 1][d.y - 1] != SQUARE_CHARACTER_2 && square[d.x + 1][d.y - 1] != SQUARE_CHARACTER_1) {

				aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 2][a.y]; square[a.x + 2][a.y] = aux; a.x = a.x + 2;
				aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x - 1][b.y + 1]; square[b.x - 1][b.y + 1] = aux; b.x = b.x - 1; b.y = b.y + 1;
				aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x + 1][d.y - 1]; square[d.x + 1][d.y - 1] = aux; d.x = d.x + 1; d.y = d.y - 1;

				var.x = a.x; var.y = a.y; a.x = b.x; a.y = b.y; b.x = var.x; b.y = var.y;
				var.x = d.x; var.y = d.y; d.x = b.x; d.y = b.y; b.x = var.x; b.y = var.y;
				var.x = c.x; var.y = c.y; c.x = b.x; c.y = b.y; b.x = var.x; b.y = var.y;
			}
		}
		else
			if (a.x < d.x && a.x == b.x)
				if (square[a.x - 1][a.y + 1] != PIECE_CHARACTER && square[a.x - 1][a.y + 1] != SQUARE_CHARACTER_2 && square[a.x - 1][a.y + 1] != SQUARE_CHARACTER_1 &&
					square[c.x + 1][c.y - 1] != PIECE_CHARACTER && square[c.x + 1][c.y - 1] != SQUARE_CHARACTER_2 && square[c.x + 1][c.y - 1] != SQUARE_CHARACTER_1 &&
					square[d.x - 2][d.y] != PIECE_CHARACTER && square[d.x - 2][d.y] != SQUARE_CHARACTER_2 && square[d.x - 2][d.y] != SQUARE_CHARACTER_1) {

					aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x - 1][a.y + 1]; square[a.x - 1][a.y + 1] = aux; a.x = a.x - 1; a.y = a.y + 1;
					aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x + 1][c.y - 1]; square[c.x + 1][c.y - 1] = aux; c.x = c.x + 1; c.y = c.y - 1;
					aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 2][d.y]; square[d.x - 2][d.y] = aux; d.x = d.x - 2;

					var.x = c.x; var.y = c.y; c.x = d.x; c.y = d.y; d.x = var.x; d.y = var.y;
					var.x = c.x; var.y = c.y; c.x = b.x; c.y = b.y; b.x = var.x; b.y = var.y;
					var.x = a.x; var.y = a.y; a.x = b.x; a.y = b.y; b.x = var.x; b.y = var.y;
				}
	}
	else
		if (b.y == c.y)
			if (d.y > c.y) {
				if (square[a.x + 1][a.y + 1] != PIECE_CHARACTER && square[a.x + 1][a.y + 1] != SQUARE_CHARACTER_2 && square[a.x + 1][a.y + 1] != SQUARE_CHARACTER_1 &&
					square[c.x - 1][c.y - 1] != PIECE_CHARACTER && square[c.x - 1][c.y - 1] != SQUARE_CHARACTER_2 && square[c.x - 1][c.y - 1] != SQUARE_CHARACTER_1 &&
					square[d.x][d.y - 2] != PIECE_CHARACTER && square[d.x][d.y - 2] != SQUARE_CHARACTER_2 && square[d.x][d.y - 2] != SQUARE_CHARACTER_1) {

					aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 1][a.y + 1]; square[a.x + 1][a.y + 1] = aux; a.x = a.x + 1; a.y = a.y + 1;
					aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x - 1][c.y - 1]; square[c.x - 1][c.y - 1] = aux; c.x = c.x - 1; c.y = c.y - 1;
					aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x][d.y - 2]; square[d.x][d.y - 2] = aux; d.y = d.y - 2;

					var.x = a.x; var.y = a.y; a.x = c.x; a.y = c.y; c.x = var.x; c.y = var.y;
				}
			}
			else
				if (a.y < b.y) {
					if (square[a.x][a.y + 2] != PIECE_CHARACTER && square[a.x][a.y + 2] != SQUARE_CHARACTER_2 && square[a.x][a.y + 2] != SQUARE_CHARACTER_1 &&
						square[b.x + 1][b.y + 1] != PIECE_CHARACTER && square[b.x + 1][b.y + 1] != SQUARE_CHARACTER_2 && square[b.x + 1][b.y + 1] != SQUARE_CHARACTER_1 &&
						square[d.x - 1][d.y - 1] != PIECE_CHARACTER && square[d.x - 1][d.y - 1] != SQUARE_CHARACTER_2 && square[d.x - 1][d.y - 1] != SQUARE_CHARACTER_1) {

						aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x][a.y + 2]; square[a.x][a.y + 2] = aux; a.y = a.y + 2;
						aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x + 1][b.y + 1]; square[b.x + 1][b.y + 1] = aux; b.x = b.x + 1; b.y = b.y + 1;
						aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 1][d.y - 1]; square[d.x - 1][d.y - 1] = aux; d.x = d.x - 1; d.y = d.y - 1;

						var.x = b.x; var.y = b.y; b.x = d.x; b.y = d.y; d.x = var.x; d.y = var.y;
					}
				}
}

void rotate_piece_Z() {
	char aux;
	if (a.x == b.x) {
		if (square[d.x][d.y - 2] != PIECE_CHARACTER && square[d.x][d.y - 2] != SQUARE_CHARACTER_2 && square[d.x][d.y - 2] != SQUARE_CHARACTER_1 &&
			square[a.x + 2][a.y] != PIECE_CHARACTER && square[a.x + 2][a.y] != SQUARE_CHARACTER_2 && square[a.x + 2][a.y] != SQUARE_CHARACTER_1) {

			aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x][d.y - 2]; square[d.x][d.y - 2] = aux; d.y = d.y - 2;
			aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 2][a.y]; square[a.x + 2][a.y] = aux; a.x = a.x + 2;

			var.x = d.x; var.y = d.y; d.x = a.x; d.y = a.y; a.x = var.x; a.y = var.y;
			var.x = c.x; var.y = c.y; c.x = a.x; c.y = a.y; a.x = var.x; a.y = var.y;
			var.x = b.x; var.y = b.y; b.x = a.x; b.y = a.y; a.x = var.x; a.y = var.y;
			var.x = b.x; var.y = b.y; b.x = c.x; b.y = c.y; c.x = var.x; c.y = var.y;
		}
	}
	else
		if (square[b.x][b.y + 2] != PIECE_CHARACTER && square[b.x][b.y + 2] != SQUARE_CHARACTER_2 && square[b.x][b.y + 2] != SQUARE_CHARACTER_1 &&
			square[d.x - 2][d.y] != PIECE_CHARACTER && square[d.x - 2][d.y] != SQUARE_CHARACTER_2 && square[d.x - 2][d.y] != SQUARE_CHARACTER_1) {

			aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x][b.y + 2]; square[b.x][b.y + 2] = aux; b.y = b.y + 2;
			aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 2][d.y]; square[d.x - 2][d.y] = aux; d.x = d.x - 2;

			var.x = d.x; var.y = d.y; d.x = a.x; d.y = a.y; a.x = var.x; a.y = var.y;
			var.x = c.x; var.y = c.y; c.x = d.x; c.y = d.y; d.x = var.x; d.y = var.y;
			var.x = b.x; var.y = b.y; b.x = d.x; b.y = d.y; d.x = var.x; d.y = var.y;
			var.x = b.x; var.y = b.y; b.x = c.x; b.y = c.y; c.x = var.x; c.y = var.y;
		}
}

void rotate_piece_Zr() {
	char aux;
	if (a.x == b.x) {
		if (square[b.x][b.y - 2] != PIECE_CHARACTER && square[b.x][b.y - 2] != SQUARE_CHARACTER_2 && square[b.x][b.y - 2] != SQUARE_CHARACTER_1 &&
			square[a.x + 2][a.y] != PIECE_CHARACTER && square[a.x + 2][a.y] != SQUARE_CHARACTER_2 && square[a.x + 2][a.y] != SQUARE_CHARACTER_1) {

			aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x][b.y - 2]; square[b.x][b.y - 2] = aux; b.y = b.y - 2;
			aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 2][a.y]; square[a.x + 2][a.y] = aux; a.x = a.x + 2;

			var.x = d.x; var.y = d.y; d.x = a.x; d.y = a.y; a.x = var.x; a.y = var.y;
			var.x = c.x; var.y = c.y; c.x = a.x; c.y = a.y; a.x = var.x; a.y = var.y;
			var.x = b.x; var.y = b.y; b.x = a.x; b.y = a.y; a.x = var.x; a.y = var.y;
		}
	}
	else
		if (square[a.x][a.y + 2] != PIECE_CHARACTER && square[a.x][a.y + 2] != SQUARE_CHARACTER_2 && square[a.x][a.y + 2] != SQUARE_CHARACTER_1 &&
			square[d.x - 2][d.y] != PIECE_CHARACTER && square[d.x - 2][d.y] != SQUARE_CHARACTER_2 && square[d.x - 2][d.y] != SQUARE_CHARACTER_1) {

			aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x][a.y + 2]; square[a.x][a.y + 2] = aux; a.y = a.y + 2;
			aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 2][d.y]; square[d.x - 2][d.y] = aux; d.x = d.x - 2;

			var.x = d.x; var.y = d.y; d.x = a.x; d.y = a.y; a.x = var.x; a.y = var.y;
			var.x = d.x; var.y = d.y; d.x = b.x; d.y = b.y; b.x = var.x; b.y = var.y;
			var.x = d.x; var.y = d.y; d.x = c.x; d.y = c.y; c.x = var.x; c.y = var.y;
		}
}

void rotate_piece_I() {
	char aux;
	if (a.x == b.x && b.x == c.x && c.x == d.x) {
		if (square[a.x - 1][a.y + 1] != PIECE_CHARACTER && square[a.x - 1][a.y + 1] != SQUARE_CHARACTER_2 && square[a.x - 1][a.y + 1] != SQUARE_CHARACTER_1 &&
			square[c.x + 1][c.y - 1] != PIECE_CHARACTER && square[c.x + 1][c.y - 1] != SQUARE_CHARACTER_2 && square[c.x + 1][c.y - 1] != SQUARE_CHARACTER_1 &&
			square[d.x + 2][d.y - 2] != PIECE_CHARACTER && square[d.x + 2][d.y - 2] != SQUARE_CHARACTER_2 && square[d.x + 2][d.y - 2] != SQUARE_CHARACTER_1) {

			aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x - 1][a.y + 1]; square[a.x - 1][a.y + 1] = aux; a.x = a.x - 1; a.y = a.y + 1;
			aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x + 1][c.y - 1]; square[c.x + 1][c.y - 1] = aux; c.x = c.x + 1; c.y = c.y - 1;
			aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x + 2][d.y - 2]; square[d.x + 2][d.y - 2] = aux; d.x = d.x + 2; d.y = d.y - 2;
		}
	}
	else
		if (square[a.x + 1][a.y - 1] != PIECE_CHARACTER && square[a.x + 1][a.y - 1] != SQUARE_CHARACTER_2 && square[a.x + 1][a.y - 1] != SQUARE_CHARACTER_1 &&
			square[c.x - 1][c.y + 1] != PIECE_CHARACTER && square[c.x - 1][c.y + 1] != SQUARE_CHARACTER_2 && square[c.x - 1][c.y + 1] != SQUARE_CHARACTER_1 &&
			square[d.x - 2][d.y + 2] != PIECE_CHARACTER && square[d.x - 2][d.y + 2] != SQUARE_CHARACTER_2 && square[d.x - 2][d.y + 2] != SQUARE_CHARACTER_1) {

			aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 1][a.y - 1]; square[a.x + 1][a.y - 1] = aux; a.x = a.x + 1; a.y = a.y - 1;
			aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x - 1][c.y + 1]; square[c.x - 1][c.y + 1] = aux; c.x = c.x - 1; c.y = c.y + 1;
			aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x - 2][d.y + 2]; square[d.x - 2][d.y + 2] = aux; d.x = d.x - 2; d.y = d.y + 2;
		}

}

void move_piece_down() {
	char aux;
	aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x + 1][d.y]; square[d.x + 1][d.y] = aux; d.x++;
	aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x + 1][c.y]; square[c.x + 1][c.y] = aux; c.x++;
	aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x + 1][b.y]; square[b.x + 1][b.y] = aux; b.x++;
	aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x + 1][a.y]; square[a.x + 1][a.y] = aux; a.x++;
}

void move_piece_left() {
	char aux;
	aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x][a.y - 1]; square[a.x][a.y - 1] = aux; a.y--;
	aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x][b.y - 1]; square[b.x][b.y - 1] = aux; b.y--;
	aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x][c.y - 1]; square[c.x][c.y - 1] = aux; c.y--;
	aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x][d.y - 1]; square[d.x][d.y - 1] = aux; d.y--;
}

void move_piece_right() {
	char aux;
	aux = square[d.x][d.y]; square[d.x][d.y] = square[d.x][d.y + 1]; square[d.x][d.y + 1] = aux; d.y++;
	aux = square[c.x][c.y]; square[c.x][c.y] = square[c.x][c.y + 1]; square[c.x][c.y + 1] = aux; c.y++;
	aux = square[b.x][b.y]; square[b.x][b.y] = square[b.x][b.y + 1]; square[b.x][b.y + 1] = aux; b.y++;
	aux = square[a.x][a.y]; square[a.x][a.y] = square[a.x][a.y + 1]; square[a.x][a.y + 1] = aux; a.y++;
}

bool collision_right() {
	a.z = 1; b.z = 1; c.z = 1; d.z = 1; // sunt variabile de tip bool care indica starea coordonatelor
	if (a.x == b.x || a.x == c.x || a.x == d.x)
		a.z = 0;
	if (b.x == c.x || b.x == d.x)
		b.z = 0;
	if (c.x == d.x)
		c.z = 0;
	if (square[d.x][d.y + 1] == PIECE_CHARACTER || square[d.x][d.y + 1] == SQUARE_CHARACTER_2)
		return 1;
	if (c.z && square[c.x][c.y + 1] == PIECE_CHARACTER || c.z && square[c.x][c.y + 1] == SQUARE_CHARACTER_2)
		return 1;
	if (b.z && square[b.x][b.y + 1] == PIECE_CHARACTER || b.z && square[b.x][b.y + 1] == SQUARE_CHARACTER_2)
		return 1;
	if (a.z && square[a.x][a.y + 1] == PIECE_CHARACTER || a.z && square[a.x][a.y + 1] == SQUARE_CHARACTER_2)
		return 1;
	return 0;
}

bool collision_down() {
	a.z = 1; b.z = 1; c.z = 1; d.z = 1; // sunt variabile de tip bool care indica starea coordonatelor
	if (a.y == b.y || a.y == c.y || a.y == d.y)
		a.z = 0;
	if (b.y == c.y || b.y == d.y)
		b.z = 0;
	if (c.y == d.y)
		c.z = 0;
	if (square[d.x + 1][d.y] == PIECE_CHARACTER || square[d.x + 1][d.y] == SQUARE_CHARACTER_1)
		return 1;
	if (c.z && square[c.x + 1][c.y] == PIECE_CHARACTER || c.z && square[c.x + 1][c.y] == SQUARE_CHARACTER_1)
		return 1;
	if (b.z && square[b.x + 1][b.y] == PIECE_CHARACTER || b.z && square[b.x + 1][b.y] == SQUARE_CHARACTER_1)
		return 1;
	if (a.z && square[a.x + 1][a.y] == PIECE_CHARACTER || a.z && square[a.x + 1][a.y] == SQUARE_CHARACTER_1)
		return 1;
	return 0;
}

bool collision_left() {
	a.z = 1; b.z = 1; c.z = 1; d.z = 1; // sunt variabile de tip bool care indica starea coordonatelor
	if (d.x == c.x || d.x == b.x || d.x == a.x)
		d.z = 0;
	if (c.x == b.x || c.x == a.x)
		c.z = 0;
	if (b.x == a.x)
		b.z = 0;
	if (square[a.x][a.y - 1] == PIECE_CHARACTER || square[a.x][a.y - 1] == SQUARE_CHARACTER_2)
		return 1;
	if (b.z && square[b.x][b.y - 1] == PIECE_CHARACTER || b.z && square[b.x][b.y - 1] == SQUARE_CHARACTER_2)
		return 1;
	if (c.z && square[c.x][c.y - 1] == PIECE_CHARACTER || c.z && square[c.x][c.y - 1] == SQUARE_CHARACTER_2)
		return 1;
	if (d.z && square[d.x][d.y - 1] == PIECE_CHARACTER || d.z && square[d.x][d.y - 1] == SQUARE_CHARACTER_2)
		return 1;
	return 0;
}

void game_over() {
	int c;
	c = HEIGHT + 1;
	while (c >= 4) {
		for (int i = 1; i <= WIDTH - 2; i++) {
			if (square[c][i] != PIECE_CHARACTER)
				square[c][i] = PIECE_CHARACTER;
		}
		gotoxy(0, 0);
		display();
		c--;
		Sleep(GAME_OVER_SPEED);
	}
}

void erase_game_over() {
	int c;
	c = 4;
	while (c <= HEIGHT + 1) {
		for (int i = 1; i <= WIDTH - 2; i++) {
			square[c][i] = '\0';
		}
		if (c == GAME_OVER_HEIGHT_POSITION) {
			square[c][GAME_OVER_WIDTH_POSITION + 0] = 'G';
			square[c][GAME_OVER_WIDTH_POSITION + 1] = 'A';
			square[c][GAME_OVER_WIDTH_POSITION + 2] = 'M';
			square[c][GAME_OVER_WIDTH_POSITION + 3] = 'E';
			square[c][GAME_OVER_WIDTH_POSITION + 5] = 'O';
			square[c][GAME_OVER_WIDTH_POSITION + 6] = 'V';
			square[c][GAME_OVER_WIDTH_POSITION + 7] = 'E';
			square[c][GAME_OVER_WIDTH_POSITION + 8] = 'R';
		}
		gotoxy(0, 0);
		display();
		c++;
		Sleep(GAME_OVER_SPEED);
	}
}

void erase_square() {
	for (int i = 4; i <= HEIGHT + 1; i++)
		for (int j = 1; j <= WIDTH - 2; j++)
			square[i][j] = '\0';
	gotoxy(0, 0);
	display();
}

bool check_line(int x) {
	for (int i = 1; i <= WIDTH - 2; i++) {
		if (square[x][i] != PIECE_CHARACTER)
			return 0;
	}
	return 1;
}

void erase_line() {
	int c = 0;
	for (int i = coord_value; i <= HEIGHT + 2; i++) {
		if (check_line(i)) {
			if (!c)
				Sleep(800);
			c++;
			score += 10;
			setColor(SCORE_AND_LETTER_COLOR);
			display_score();
			gotoxy(0, 0);
			display();
			for (int j = 1; j <= WIDTH - 2; j++)
				square[i][j] = '\0';
			int l;
			for (l = i; l >= 5; l--)
				for (int k = 1; k <= WIDTH - 2; k++)
					square[l][k] = square[l - 1][k];
			for (int k = 1; k <= WIDTH - 2; k++)
				square[l][k] = '\0';
		}
	}
}

void start_menu() {
	display_start_menu();
	// play = 1, help = 2, about = 3, exit = 4;
	display_menu_select_character(current_choice);
	while (true) {
		if (GetKeyState(VK_UP) < 0) {
			if (current_choice == 1) {
				erase_menu_select_character(current_choice);
				current_choice = 4;
				display_menu_select_character(current_choice);
			}
			else {
				erase_menu_select_character(current_choice);
				current_choice--;
				display_menu_select_character(current_choice);
			}
			Sleep(200);
		}
		if (GetKeyState(VK_DOWN) < 0) {
			if (current_choice == 4) {
				erase_menu_select_character(current_choice);
				current_choice = 1;
				display_menu_select_character(current_choice);
			}
			else {
				erase_menu_select_character(current_choice);
				current_choice++;
				display_menu_select_character(current_choice);
			}
			Sleep(200);
		}
		if (GetKeyState(VK_RETURN) < 0)
			break;
	}
}

void hide_cursor() {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO CursorInfo;
	CursorInfo.dwSize = 1;
	CursorInfo.bVisible = false;
	SetConsoleCursorInfo(hConsole, &CursorInfo);
}

int main() {

	SetConsoleTitle("Tetris");
	hide_cursor();

	make_square();
	make_right_side();
	make_piece_T();
	make_piece_L();
	make_piece_Lr();
	make_piece_Z();
	make_piece_Zr();
	make_piece_O();
	make_piece_I();

	while (!exit_game) {

		srand(time(NULL));
		random_piece_value = rand() % 7;
		switch (random_piece_value) {
		case 0: copy_piece_to_square(piece_T); break;
		case 1: copy_piece_to_square(piece_L); break;
		case 2: copy_piece_to_square(piece_Lr); break;
		case 3: copy_piece_to_square(piece_Z); break;
		case 4: copy_piece_to_square(piece_Zr); break;
		case 5: copy_piece_to_square(piece_O); break;
		case 6: copy_piece_to_square(piece_I); break;
		}

		next_random_piece_value = rand() % 7;

		while (d.x != 3)
			move_piece_down();

		current_choice = 1;
		game_over_condition = 0;
		score = 0;
		x = 1; x_2 = 10;
		score_2 = 20;
		speed = 500;
		if (!play_again) {
			int t = 1;
			while (t && !exit_game) {
				system("cls");
				display();
				start_menu();
				switch (current_choice) {
				case 1: t = 0;  break;
				case 2: display_help(); break;
				case 3: display_about(); break;
				case 4: exit_game = 1; break;
				}
			}
		}

		if (exit_game)
			break;

		gotoxy(0, 0);
		display();
		display_right_side();
		display_next_piece();
		display_score();

		while (!game_over_condition) {
			before_piece_down = 0;
			while (true) {
				sleep_value += 10;
				Sleep(10);
				if (collision_down())
					before_piece_down = 1;
				else
					before_piece_down = 0;
				if (sleep_value >= speed) {
					if (!collision_down()) {
						move_piece_down();
						gotoxy(0, 0);
						display();
					}
					sleep_value = 0;
					if (before_piece_down == 1)
						break;
				}
				if (GetKeyState(VK_DOWN) < 0)
					if (!collision_down()) {
						move_piece_down();
						gotoxy(0, 0);
						display();
						Sleep(SPEED_DOWN);
						sleep_value = 0;
					}
					else
						if (collision_down && before_piece_down == 1)
							break;
				if (GetKeyState(VK_LEFT) < 0 && a.x >= 4)
					if (!collision_left()) {
						move_piece_left();
						gotoxy(0, 0);
						display();
						sleep_value += SPEED_LEFT_RIGHT + 10;
						Sleep(SPEED_LEFT_RIGHT);
					}
				if (GetKeyState(VK_RIGHT) < 0 && a.x >= 4)
					if (!collision_right()) {
						move_piece_right();
						gotoxy(0, 0);
						display();
						sleep_value += SPEED_LEFT_RIGHT + 10;
						Sleep(SPEED_LEFT_RIGHT);
					}
				if (GetKeyState(VK_UP) < 0 && a.x >= 4) {
					switch (random_piece_value) {
						case 0: rotate_piece_T(); break;
						case 1: rotate_piece_L(); break;
						case 2: rotate_piece_Lr(); break;
						case 3: rotate_piece_Z(); break;
						case 4: rotate_piece_Zr(); break;
						case 6: rotate_piece_I(); break;
					}
					gotoxy(0, 0);
					display();
					sleep_value += 150 + 10;
					Sleep(150);
				}
				if (GetKeyState(VK_SPACE) > 0) {
					gotoxy(0, 0);
					display_pause();
					while (GetKeyState(VK_SPACE) > 0) {
						continue;
					}
				}
			}
			if (collision_down() && a.x >= 4 && before_piece_down == 1) {
				coord_value = a.x;
				random_piece_value = next_random_piece_value;
				switch (random_piece_value) {
					case 0: copy_piece_to_square(piece_T); break;
					case 1: copy_piece_to_square(piece_L); break;
					case 2: copy_piece_to_square(piece_Lr); break;
					case 3: copy_piece_to_square(piece_Z); break;
					case 4: copy_piece_to_square(piece_Zr); break;
					case 5: copy_piece_to_square(piece_O); break;
					case 6: copy_piece_to_square(piece_I); break;
				}

				next_random_piece_value = rand() % 7;
				display_next_piece();

				gotoxy(0, 0);
				display();
				erase_line();
				score += x;
				setColor(SCORE_AND_LETTER_COLOR);
				display_score();
				if (score >= score_2) {
					speed -= 50;
					score_2 += x_2;
					x_2 += x_2 / 2;
					x++;
				}
				gotoxy(0, 0);
				display();

				while (d.x != 3)
					move_piece_down();

			}
			else
				if (collision_down() && a.x <= 3) { // conditie game over
					game_over();
					erase_game_over();
					play_again = 0;
					Sleep(1000);
					display_game_over_choices();
					while (!game_over_condition) {
						if (GetKeyState(VK_BACK) < 0) {
							erase_square();
							game_over_condition = 1;
						}
						if (GetKeyState(VK_RETURN) < 0) {
							erase_square();
							game_over_condition = 1;
							play_again = 1;
						}
					}
				}
		}
	}
}
